(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{378:function(e,t,s){"use strict";s.r(t);var n=s(3),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("参考：")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/sunsky303/p/10648861.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/sunsky303/p/10648861.html"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://xiezefan.me/2017/09/27/nginx-502-bug-trace/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://xiezefan.me/2017/09/27/nginx-502-bug-trace/"),t("OutboundLink")],1)])])]),e._v(" "),t("p",[e._v("某天夜里的凌晨，监控组件报警Nginx间接性出现大量5XX错误，先是看了sentry的错误日志情况，发现没有代码的报错，接着查看nginx错误日志，观察到出现了大量"),t("code",[e._v("no live upstreams while connecting to upstream")]),e._v("的报错。")]),e._v(" "),t("p",[e._v("一顿Google后，找到几篇博客得以顺利解决。排查思路和【参考2】类似，配置原理及见【参考1】")]),e._v(" "),t("h2",{attrs:{id:"一、排查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、排查"}},[e._v("#")]),e._v(" 一、排查")]),e._v(" "),t("p",[e._v("这里出现"),t("code",[e._v("no live upstreams while connecting to upstream")]),e._v(", 也就说一瞬间Nginx检测不到任何存活的后端服务，而网络又没有大波动，那就可能是TCP链接出问题。打开Zabbix监控发现TCP连接数的确发生剧烈的波动现象。这时候问题很明显，Nginx->API这一链路存在大量的TCP链接被回收的情况，我们马上在API机器上查看链接状态。")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("shell "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("netstat")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}'")]),e._v("\nSYN_RECV \t "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\nESTABLISHED  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("656")]),e._v("\nFIN_WAIT1 \t "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v("\nTIME_WAIT \t "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("153429")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("TIME_WAIT特别的多，大量的连接被API侧主动关闭了。这说明Nginx->API这一步请求并没有Keep-Alive，,")]),e._v(" "),t("h2",{attrs:{id:"二、nginx之tcp-nopush、tcp-nodelay、sendfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、nginx之tcp-nopush、tcp-nodelay、sendfile"}},[e._v("#")]),e._v(" 二、nginx之tcp_nopush、tcp_nodelay、sendfile")]),e._v(" "),t("p",[e._v("1、TCP_NODELAY\n你怎么可以强制 socket 在它的缓冲区里发送数据？\n一个解决方案是 TCP 堆栈的 TCP_NODELAY选项。这样就可以使缓冲区中的数据立即发送出去。")]),e._v(" "),t("p",[e._v("Nginx的 TCP_NODELAY 选项使得在打开一个新的 socket 时增加了TCP_NODELAY选项。但这时会造成一种情况：\n终端应用程序每产生一次操作就会发送一个包，而典型情况下一个包会拥有一个字节的数据以及40个字节长的包头，于是产生4000%的过载，很轻易地就能令网络发生拥塞。"),t("strong",[e._v("为了避免这种情况，TCP堆栈实现了等待数据 0.2秒钟，因此操作后它不会发送一个数据包，而是将这段时间内的数据打成一个大的包。这一机制是由Nagle算法保证。")])]),e._v(" "),t("p",[e._v("Nagle化后来成了一种标准并且立即在因特网上得以实现。它现在已经成为默认配置了，但有些场合下把这一选项关掉也是合乎需要的。现在假设某个应用程序发出了一个请求，希望发送小块数据。我们可以选择立即发送数据或者等待产生更多的数据然后再一次发送两种策略。\n如果我们马上发送数据，那么交互性的以及客户/服务器型的应用程序将极大地受益。如果请求立即发出那么响应时间也会快一些。"),t("strong",[e._v("以上操作可以通过设置套接字的 TCP_NODELAY = on 选项来完成，这样就禁用了Nagle 算法。（不需要等待0.2s）")])]),e._v(" "),t("p",[e._v("2、TCP_NOPUSH\n在 nginx 中，tcp_nopush 配置和 tcp_nodelay “互斥”。它可以配置一次发送数据的包大小。也就是说，它不是按时间累计 0.2 秒后发送包，而是当包累计到一定大小后就发送。")]),e._v(" "),t("blockquote",[t("p",[e._v("注：在 nginx 中，tcp_nopush 必须和 sendfile 搭配使用。")])]),e._v(" "),t("p",[e._v("3、sendfile\n现在流行的web 服务器里面都提供 sendfile选项用来提高服务器性能，那到底 sendfile是什么，怎么影响性能的呢？\nsendfile实际上是 Linux2.0+以后的推出的一个系统调用，web服务器可以通过调整自身的配置来决定是否利用 sendfile这个系统调用。先来看一下不用 sendfile的传统网络传输过程：\nread(file,tmp_buf, len);\nwrite(socket,tmp_buf, len);")]),e._v(" "),t("blockquote",[t("p",[e._v("硬盘 >> kernel buffer >> user buffer>> kernel socket buffer >>协议栈")])]),e._v(" "),t("p",[e._v("1）一般来说一个网络应用是通过读硬盘数据，然后写数据到socket 来完成网络传输的。上面2行用代码解释了这一点，不过上面2行简单的代码掩盖了底层的很多操作。来看看底层是怎么执行上面2行代码的：")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("解释")]),e._v(" "),t("ol",[t("li",[e._v("系统调用 read()产生一个上下文切换：从 user mode 切换到 kernel mode，然后 DMA 执行拷贝，把文件数据从硬盘读到一个 kernel buffer 里。")]),e._v(" "),t("li",[e._v("数据从 kernel buffer拷贝到 user buffer，然后系统调用 read() 返回，这时又产生一个上下文切换：从kernel mode 切换到 user mode。")]),e._v(" "),t("li",[e._v("系统调用write()产生一个上下文切换：从 user mode切换到 kernel mode，然后把步骤2读到 user buffer的数据拷贝到 kernel buffer（数据第2次拷贝到 kernel buffer），不过这次是个不同的 kernel buffer，这个 buffer和 socket相关联。")]),e._v(" "),t("li",[e._v("系统调用 write()返回，产生一个上下文切换：从 kernel mode 切换到 user mode（第4次切换了），然后 DMA 从 kernel buffer拷贝数据到协议栈（第4次拷贝了）。")])]),e._v(" "),t("p",[e._v("上面4个步骤有4次上下文切换，有4次拷贝，我们发现如果能减少切换次数和拷贝次数将会有效提升性能。在kernel2.0+ 版本中，系统调用 sendfile() 就是用来简化上面步骤提升性能的。sendfile() 不但能减少切换次数而且还能减少拷贝次数。")])]),e._v(" "),t("p",[e._v("2）再来看一下用 sendfile()来进行网络传输的过程：\nsendfile(socket,file, len);")]),e._v(" "),t("blockquote",[t("p",[e._v("硬盘 >> kernel buffer (快速拷贝到kernelsocket buffer) >>协议栈")])]),e._v(" "),t("ol",[t("li",[e._v("系统调用sendfile()通过 DMA把硬盘数据拷贝到 kernel buffer，然后数据被 kernel直接拷贝到另外一个与 socket相关的 kernel buffer。这里没有 user mode和 kernel mode之间的切换，在 kernel中直接完成了从一个 buffer到另一个 buffer的拷贝。")]),e._v(" "),t("li",[e._v("DMA 把数据从 kernelbuffer 直接拷贝给协议栈，没有切换，也不需要数据从 user mode 拷贝到 kernel mode，因为数据就在 kernel 里。")])]),e._v(" "),t("p",[e._v("步骤减少了，切换减少了，拷贝减少了，自然性能就提升了。这就是为什么说在Nginx 配置文件里打开 sendfile on 选项能提高 web server性能的原因。")]),e._v(" "),t("blockquote",[t("p",[e._v("综上，这三个参数都应该配置成on：sendfile on; tcp_nopush on; tcp_nodelay on;")])]),e._v(" "),t("h2",{attrs:{id:"三、nginx长连接-keepalive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、nginx长连接-keepalive"}},[e._v("#")]),e._v(" 三、nginx长连接——keepalive")]),e._v(" "),t("p",[e._v("当使用nginx作为反向代理时，为了支持长连接，需要做到两点：")]),e._v(" "),t("ul",[t("li",[e._v("从client到nginx的连接是长连接")]),e._v(" "),t("li",[e._v("从nginx到server的连接是长连接")])]),e._v(" "),t("p",[e._v("1、保持和client的长连接：")]),e._v(" "),t("p",[e._v("默认情况下，nginx已经自动开启了对client连接的keep alive支持（同时client发送的HTTP请求要求keep alive）。一般场景可以直接使用，但是对于一些比较特殊的场景，还是有必要调整个别参数（keepalive_timeout和keepalive_requests）。")]),e._v(" "),t("div",{staticClass:"language-nginx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-nginx"}},[t("code",[e._v("`http "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("keepalive_timeout")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("120s")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("120s")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("keepalive_requests")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("`\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("1）keepalive_timeout\n语法:")]),e._v(" "),t("blockquote",[t("p",[e._v("keepalive_timeout timeout [header_timeout];")])]),e._v(" "),t("ol",[t("li",[e._v("第一个参数：设置keep-alive客户端连接在服务器端保持开启的超时值（默认75s）；值为0会禁用keep-alive客户端连接；")]),e._v(" "),t("li",[e._v("第二个参数：可选、在响应的header域中设置一个值“Keep-Alive: timeout=time”；通常可以不用设置；")])]),e._v(" "),t("p",[e._v("注：keepalive_timeout默认75s，一般情况下也够用，对于一些请求比较大的内部服务器通讯的场景，适当加大为120s或者300s；")]),e._v(" "),t("p",[e._v("2）keepalive_requests：\nkeepalive_requests指令用于设置一个keep-alive连接上可以服务的请求的最大数量，当最大请求数量达到时，连接被关闭。默认是100。这个参数的真实含义，是指一个keep alive建立之后，nginx就会为这个连接设置一个计数器，记录这个keep alive的长连接上已经接收并处理的客户端请求的数量。如果达到这个参数设置的最大值时，则nginx会强行关闭这个长连接，逼迫客户端不得不重新建立新的长连接。\n大多数情况下当QPS(每秒请求数)不是很高时，默认值100凑合够用。但是，对于一些QPS比较高（比如超过10000QPS，甚至达到30000,50000甚至更高) 的场景，默认的100就显得太低。\n简单计算一下，QPS=10000时，客户端每秒发送10000个请求(通常建立有多个长连接)，每个连接只能最多跑100次请求，意味着平均每秒钟就会有100个长连接因此被nginx关闭。同样意味着为了保持QPS，客户端不得不每秒中重新新建100个连接。因此，就会发现有大量的TIME_WAIT的socket连接(即使此时keep alive已经在client和nginx之间生效)。因此对于QPS较高的场景，非常有必要加大这个参数，以避免出现大量连接被生成再抛弃的情况，减少TIME_WAIT。")]),e._v(" "),t("p",[e._v("2、保持和server的长连接：\n为了让nginx和后端server（nginx称为upstream）之间保持长连接，典型设置如下：（默认nginx访问后端都是用的短连接(HTTP1.0)，一个请求来了，Nginx 新开一个端口和后端建立连接，后端执行完毕后主动关闭该链接）")]),e._v(" "),t("div",{staticClass:"language-nginx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-nginx"}},[t("code",[e._v("`http "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("upstream")]),e._v("  BACKEND")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),e._v("   192.168.0.1：8080  weight=1 max_fails=2 fail_timeout=30s")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),e._v("   192.168.0.2：8080  weight=1 max_fails=2 fail_timeout=30s")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("keepalive")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("300")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("        // 这个很重要！    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("server "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("listen")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8080")]),e._v(" default_server")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server_name")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" /")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_pass")]),e._v(" http://BACKEND")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v(" Host  "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$Host")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v(" x-forwarded-for "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$remote_addr")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v(" X-Real-IP "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$remote_addr")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" Cache-Control no-store")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" Pragma  no-cache")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_http_version")]),e._v(" 1.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("         // 这两个最好也设置            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v(" Connection "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("`\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("1）location中有两个参数需要设置：")]),e._v(" "),t("div",{staticClass:"language-nginx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-nginx"}},[t("code",[e._v("`http "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" /")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_http_version")]),e._v(" 1.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" // 这两个最好也设置            "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v(" Connection "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("`\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("HTTP协议中对长连接的支持是从1.1版本之后才有的，因此最好通过proxy_http_version指令设置为”1.1”；\n而”Connection” header应该被清理。清理的意思，我的理解，是清理从client过来的http header，因为即使是client和nginx之间是短连接，nginx和upstream之间也是可以开启长连接的。这种情况下必须清理来自client请求中的”Connection” header。")]),e._v(" "),t("p",[e._v("2）upstream中的keepalive设置：\n此处keepalive的含义不是开启、关闭长连接的开关；也不是用来设置超时的timeout；更不是设置长连接池最大连接数。官方解释：")]),e._v(" "),t("ol",[t("li",[e._v("The connections parameter sets the maximum number of idle keepalive connections to upstream servers connections（"),t("strong",[e._v("设置到upstream服务器的空闲keepalive连接的最大数量")]),e._v("）")]),e._v(" "),t("li",[e._v("When this number is exceeded, the least recently used connections are closed. （"),t("strong",[e._v("当这个数量被突破时，最近使用最少的连接将被关闭")]),e._v("）")]),e._v(" "),t("li",[e._v("It should be particularly noted that the keepalive directive does not limit the total number of connections to upstream servers that an nginx worker process can open.（"),t("strong",[e._v("特别提醒：keepalive指令不会限制一个nginx worker进程到upstream服务器连接的总数量")]),e._v("）")])]),e._v(" "),t("p",[e._v("我们先假设一个场景： 有一个HTTP服务，作为upstream服务器接收请求，响应时间为100毫秒。如果要达到10000 QPS的性能，就需要在nginx和upstream服务器之间建立大约1000条HTTP连接。nginx为此建立连接池，然后请求过来时为每个请求分配一个连接，请求结束时回收连接放入连接池中，连接的状态也就更改为idle。我们再假设这个upstream服务器的keepalive参数设置比较小，比如常见的10.")]),e._v(" "),t("p",[e._v("A、假设请求和响应是均匀而平稳的，那么这1000条连接应该都是一放回连接池就立即被后续请求申请使用，线程池中的idle线程会非常的少，趋进于零，不会造成连接数量反复震荡。")]),e._v(" "),t("p",[e._v("B、显示中请求和响应不可能平稳，我们以10毫秒为一个单位，来看连接的情况(注意场景是1000个线程+100毫秒响应时间，每秒有10000个请求完成)，我们假设应答始终都是平稳的，只是请求不平稳，第一个10毫秒只有50,第二个10毫秒有150：")]),e._v(" "),t("ol",[t("li",[e._v("下一个10毫秒，有100个连接结束请求回收连接到连接池，但是假设此时请求不均匀10毫秒内没有预计的100个请求进来，而是只有50个请求。注意此时连接池回收了100个连接又分配出去50个连接，因此连接池内有50个空闲连接。")]),e._v(" "),t("li",[e._v("然后注意看keepalive=10的设置，这意味着连接池中最多容许保留有10个空闲连接。因此nginx不得不将这50个空闲连接中的40个关闭，只留下10个。")]),e._v(" "),t("li",[e._v("再下一个10个毫秒，有150个请求进来，有100个请求结束任务释放连接。150 - 100 = 50,空缺了50个连接，减掉前面连接池保留的10个空闲连接，nginx不得不新建40个新连接来满足要求。")])]),e._v(" "),t("p",[e._v("C、同样，如果假设相应不均衡也会出现上面的连接数波动情况。")]),e._v(" "),t("p",[e._v("造成连接数量反复震荡的一个推手，就是这个keepalive 这个最大空闲连接数。毕竟连接池中的1000个连接在频繁利用时，出现短时间内多余10个空闲连接的概率实在太高。因此为了避免出现上面的连接震荡，必须考虑加大这个参数，比如上面的场景如果将keepalive设置为100或者200,就可以非常有效的缓冲请求和应答不均匀。")]),e._v(" "),t("p",[e._v("总结：\nkeepalive 这个参数一定要小心设置，尤其对于QPS比较高的场景，推荐先做一下估算，根据QPS和平均响应时间大体能计算出需要的长连接的数量。比如前面10000 QPS和100毫秒响应时间就可以推算出需要的长连接数量大概是1000. 然后将keepalive设置为这个长连接数量的10%到30%。比较懒的同学，可以直接设置为keepalive=1000之类的，一般都OK的了。")]),e._v(" "),t("p",[e._v("3、综上，出现大量TIME_WAIT的情况\n1）导致 nginx端出现大量TIME_WAIT的情况有两种：")]),e._v(" "),t("ul",[t("li",[e._v("keepalive_requests设置比较小，高并发下超过此值后nginx会强制关闭和客户端保持的keepalive长连接；（主动关闭连接后导致nginx出现TIME_WAIT）")]),e._v(" "),t("li",[e._v("keepalive设置的比较小（空闲数太小），导致高并发下nginx会频繁出现连接数震荡（超过该值会关闭连接），不停的关闭、开启和后端server保持的keepalive长连接；")])]),e._v(" "),t("p",[e._v("2）导致后端server端出现大量TIME_WAIT的情况：\nnginx没有打开和后端的长连接，即：没有设置proxy_http_version 1.1;和proxy_set_header Connection “”;从而导致后端server每次关闭连接，高并发下就会出现server端出现大量TIME_WAIT。")])])}),[],!1,null,null,null);t.default=a.exports}}]);